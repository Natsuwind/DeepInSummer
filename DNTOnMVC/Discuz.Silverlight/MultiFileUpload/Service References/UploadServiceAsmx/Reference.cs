//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace MultiFileUpload.UploadServiceAsmx {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Discuz.Web.Services", ConfigurationName="UploadServiceAsmx.MixObjectsSoap")]
    public interface MixObjectsSoap {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/ADMedia", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginADMedia(string pagename, int forumid, System.AsyncCallback callback, object asyncState);
        
        string EndADMedia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/ChartData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginChartData(int topicid, System.AsyncCallback callback, object asyncState);
        
        string EndChartData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/AlbumData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginAlbumData(int albumid, System.AsyncCallback callback, object asyncState);
        
        string EndAlbumData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/GetAttachmentUploadSet", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginGetAttachmentUploadSet(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.UploadSetInfo EndGetAttachmentUploadSet(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/StoreFileAdvanced", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginStoreFileAdvanced(MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedRequest request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse EndStoreFileAdvanced(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/CancelUpload", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginCancelUpload(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, string fileName, string forumid, System.AsyncCallback callback, object asyncState);
        
        void EndCancelUpload(System.IAsyncResult result);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Discuz.Web.Services")]
    public partial class CredentialInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string authTokenField;
        
        private int userIDField;
        
        private string passwordField;
        
        private int forumIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AuthToken {
            get {
                return this.authTokenField;
            }
            set {
                this.authTokenField = value;
                this.RaisePropertyChanged("AuthToken");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int UserID {
            get {
                return this.userIDField;
            }
            set {
                this.userIDField = value;
                this.RaisePropertyChanged("UserID");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
                this.RaisePropertyChanged("Password");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int ForumID {
            get {
                return this.forumIDField;
            }
            set {
                this.forumIDField = value;
                this.RaisePropertyChanged("ForumID");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Discuz.Web.Services")]
    public partial class AttachmentInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int aidField;
        
        private int uidField;
        
        private int tidField;
        
        private int pidField;
        
        private string postdatetimeField;
        
        private int readpermField;
        
        private string filenameField;
        
        private string descriptionField;
        
        private string filetypeField;
        
        private long filesizeField;
        
        private string attachmentField;
        
        private int downloadsField;
        
        private int sys_indexField;
        
        private string sys_nouploadField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public int Aid {
            get {
                return this.aidField;
            }
            set {
                this.aidField = value;
                this.RaisePropertyChanged("Aid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public int Uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
                this.RaisePropertyChanged("Uid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int Tid {
            get {
                return this.tidField;
            }
            set {
                this.tidField = value;
                this.RaisePropertyChanged("Tid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int Pid {
            get {
                return this.pidField;
            }
            set {
                this.pidField = value;
                this.RaisePropertyChanged("Pid");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string Postdatetime {
            get {
                return this.postdatetimeField;
            }
            set {
                this.postdatetimeField = value;
                this.RaisePropertyChanged("Postdatetime");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int Readperm {
            get {
                return this.readpermField;
            }
            set {
                this.readpermField = value;
                this.RaisePropertyChanged("Readperm");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
                this.RaisePropertyChanged("Filename");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
                this.RaisePropertyChanged("Description");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string Filetype {
            get {
                return this.filetypeField;
            }
            set {
                this.filetypeField = value;
                this.RaisePropertyChanged("Filetype");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public long Filesize {
            get {
                return this.filesizeField;
            }
            set {
                this.filesizeField = value;
                this.RaisePropertyChanged("Filesize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string Attachment {
            get {
                return this.attachmentField;
            }
            set {
                this.attachmentField = value;
                this.RaisePropertyChanged("Attachment");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public int Downloads {
            get {
                return this.downloadsField;
            }
            set {
                this.downloadsField = value;
                this.RaisePropertyChanged("Downloads");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public int Sys_index {
            get {
                return this.sys_indexField;
            }
            set {
                this.sys_indexField = value;
                this.RaisePropertyChanged("Sys_index");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string Sys_noupload {
            get {
                return this.sys_nouploadField;
            }
            set {
                this.sys_nouploadField = value;
                this.RaisePropertyChanged("Sys_noupload");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="Discuz.Web.Services")]
    public partial class UploadSetInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string attachExtensionsField;
        
        private string attachExtensionsNoSizeField;
        
        private int maxTodaySizeField;
        
        private int attachSizeField;
        
        private bool canPostAttachField;
        
        private int maxAttachSizeField;
        
        private string errMessageField;
        
        private int maxattachmentsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string AttachExtensions {
            get {
                return this.attachExtensionsField;
            }
            set {
                this.attachExtensionsField = value;
                this.RaisePropertyChanged("AttachExtensions");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string AttachExtensionsNoSize {
            get {
                return this.attachExtensionsNoSizeField;
            }
            set {
                this.attachExtensionsNoSizeField = value;
                this.RaisePropertyChanged("AttachExtensionsNoSize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public int MaxTodaySize {
            get {
                return this.maxTodaySizeField;
            }
            set {
                this.maxTodaySizeField = value;
                this.RaisePropertyChanged("MaxTodaySize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public int AttachSize {
            get {
                return this.attachSizeField;
            }
            set {
                this.attachSizeField = value;
                this.RaisePropertyChanged("AttachSize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public bool CanPostAttach {
            get {
                return this.canPostAttachField;
            }
            set {
                this.canPostAttachField = value;
                this.RaisePropertyChanged("CanPostAttach");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int MaxAttachSize {
            get {
                return this.maxAttachSizeField;
            }
            set {
                this.maxAttachSizeField = value;
                this.RaisePropertyChanged("MaxAttachSize");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string ErrMessage {
            get {
                return this.errMessageField;
            }
            set {
                this.errMessageField = value;
                this.RaisePropertyChanged("ErrMessage");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public int Maxattachments {
            get {
                return this.maxattachmentsField;
            }
            set {
                this.maxattachmentsField = value;
                this.RaisePropertyChanged("Maxattachments");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StoreFileAdvanced", WrapperNamespace="Discuz.Web.Services", IsWrapped=true)]
    public partial class StoreFileAdvancedRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=1)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] data;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=2)]
        public int dataLength;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=3)]
        public string parameters;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=4)]
        public bool firstChunk;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=5)]
        public bool lastChunk;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=6)]
        public MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo;
        
        public StoreFileAdvancedRequest() {
        }
        
        public StoreFileAdvancedRequest(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo) {
            this.fileName = fileName;
            this.data = data;
            this.dataLength = dataLength;
            this.parameters = parameters;
            this.firstChunk = firstChunk;
            this.lastChunk = lastChunk;
            this.creinfo = creinfo;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="StoreFileAdvancedResponse", WrapperNamespace="Discuz.Web.Services", IsWrapped=true)]
    public partial class StoreFileAdvancedResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        public MultiFileUpload.UploadServiceAsmx.AttachmentInfo StoreFileAdvancedResult;
        
        public StoreFileAdvancedResponse() {
        }
        
        public StoreFileAdvancedResponse(MultiFileUpload.UploadServiceAsmx.AttachmentInfo StoreFileAdvancedResult) {
            this.StoreFileAdvancedResult = StoreFileAdvancedResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface MixObjectsSoapChannel : MultiFileUpload.UploadServiceAsmx.MixObjectsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ADMediaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ADMediaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ChartDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChartDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AlbumDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AlbumDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetAttachmentUploadSetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAttachmentUploadSetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MultiFileUpload.UploadServiceAsmx.UploadSetInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MultiFileUpload.UploadServiceAsmx.UploadSetInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class StoreFileAdvancedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StoreFileAdvancedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public MultiFileUpload.UploadServiceAsmx.AttachmentInfo Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((MultiFileUpload.UploadServiceAsmx.AttachmentInfo)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class MixObjectsSoapClient : System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsSoap>, MultiFileUpload.UploadServiceAsmx.MixObjectsSoap {
        
        private BeginOperationDelegate onBeginADMediaDelegate;
        
        private EndOperationDelegate onEndADMediaDelegate;
        
        private System.Threading.SendOrPostCallback onADMediaCompletedDelegate;
        
        private BeginOperationDelegate onBeginChartDataDelegate;
        
        private EndOperationDelegate onEndChartDataDelegate;
        
        private System.Threading.SendOrPostCallback onChartDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAlbumDataDelegate;
        
        private EndOperationDelegate onEndAlbumDataDelegate;
        
        private System.Threading.SendOrPostCallback onAlbumDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAttachmentUploadSetDelegate;
        
        private EndOperationDelegate onEndGetAttachmentUploadSetDelegate;
        
        private System.Threading.SendOrPostCallback onGetAttachmentUploadSetCompletedDelegate;
        
        private BeginOperationDelegate onBeginStoreFileAdvancedDelegate;
        
        private EndOperationDelegate onEndStoreFileAdvancedDelegate;
        
        private System.Threading.SendOrPostCallback onStoreFileAdvancedCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelUploadDelegate;
        
        private EndOperationDelegate onEndCancelUploadDelegate;
        
        private System.Threading.SendOrPostCallback onCancelUploadCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MixObjectsSoapClient() {
        }
        
        public MixObjectsSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MixObjectsSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ADMediaCompletedEventArgs> ADMediaCompleted;
        
        public event System.EventHandler<ChartDataCompletedEventArgs> ChartDataCompleted;
        
        public event System.EventHandler<AlbumDataCompletedEventArgs> AlbumDataCompleted;
        
        public event System.EventHandler<GetAttachmentUploadSetCompletedEventArgs> GetAttachmentUploadSetCompleted;
        
        public event System.EventHandler<StoreFileAdvancedCompletedEventArgs> StoreFileAdvancedCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CancelUploadCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginADMedia(string pagename, int forumid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginADMedia(pagename, forumid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndADMedia(System.IAsyncResult result) {
            return base.Channel.EndADMedia(result);
        }
        
        private System.IAsyncResult OnBeginADMedia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pagename = ((string)(inValues[0]));
            int forumid = ((int)(inValues[1]));
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginADMedia(pagename, forumid, callback, asyncState);
        }
        
        private object[] OnEndADMedia(System.IAsyncResult result) {
            string retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndADMedia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnADMediaCompleted(object state) {
            if ((this.ADMediaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ADMediaCompleted(this, new ADMediaCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ADMediaAsync(string pagename, int forumid) {
            this.ADMediaAsync(pagename, forumid, null);
        }
        
        public void ADMediaAsync(string pagename, int forumid, object userState) {
            if ((this.onBeginADMediaDelegate == null)) {
                this.onBeginADMediaDelegate = new BeginOperationDelegate(this.OnBeginADMedia);
            }
            if ((this.onEndADMediaDelegate == null)) {
                this.onEndADMediaDelegate = new EndOperationDelegate(this.OnEndADMedia);
            }
            if ((this.onADMediaCompletedDelegate == null)) {
                this.onADMediaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnADMediaCompleted);
            }
            base.InvokeAsync(this.onBeginADMediaDelegate, new object[] {
                        pagename,
                        forumid}, this.onEndADMediaDelegate, this.onADMediaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginChartData(int topicid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChartData(topicid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndChartData(System.IAsyncResult result) {
            return base.Channel.EndChartData(result);
        }
        
        private System.IAsyncResult OnBeginChartData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int topicid = ((int)(inValues[0]));
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginChartData(topicid, callback, asyncState);
        }
        
        private object[] OnEndChartData(System.IAsyncResult result) {
            string retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndChartData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChartDataCompleted(object state) {
            if ((this.ChartDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChartDataCompleted(this, new ChartDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChartDataAsync(int topicid) {
            this.ChartDataAsync(topicid, null);
        }
        
        public void ChartDataAsync(int topicid, object userState) {
            if ((this.onBeginChartDataDelegate == null)) {
                this.onBeginChartDataDelegate = new BeginOperationDelegate(this.OnBeginChartData);
            }
            if ((this.onEndChartDataDelegate == null)) {
                this.onEndChartDataDelegate = new EndOperationDelegate(this.OnEndChartData);
            }
            if ((this.onChartDataCompletedDelegate == null)) {
                this.onChartDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChartDataCompleted);
            }
            base.InvokeAsync(this.onBeginChartDataDelegate, new object[] {
                        topicid}, this.onEndChartDataDelegate, this.onChartDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginAlbumData(int albumid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAlbumData(albumid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndAlbumData(System.IAsyncResult result) {
            return base.Channel.EndAlbumData(result);
        }
        
        private System.IAsyncResult OnBeginAlbumData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int albumid = ((int)(inValues[0]));
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginAlbumData(albumid, callback, asyncState);
        }
        
        private object[] OnEndAlbumData(System.IAsyncResult result) {
            string retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndAlbumData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAlbumDataCompleted(object state) {
            if ((this.AlbumDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AlbumDataCompleted(this, new AlbumDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AlbumDataAsync(int albumid) {
            this.AlbumDataAsync(albumid, null);
        }
        
        public void AlbumDataAsync(int albumid, object userState) {
            if ((this.onBeginAlbumDataDelegate == null)) {
                this.onBeginAlbumDataDelegate = new BeginOperationDelegate(this.OnBeginAlbumData);
            }
            if ((this.onEndAlbumDataDelegate == null)) {
                this.onEndAlbumDataDelegate = new EndOperationDelegate(this.OnEndAlbumData);
            }
            if ((this.onAlbumDataCompletedDelegate == null)) {
                this.onAlbumDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAlbumDataCompleted);
            }
            base.InvokeAsync(this.onBeginAlbumDataDelegate, new object[] {
                        albumid}, this.onEndAlbumDataDelegate, this.onAlbumDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginGetAttachmentUploadSet(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAttachmentUploadSet(creinfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.UploadSetInfo MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndGetAttachmentUploadSet(System.IAsyncResult result) {
            return base.Channel.EndGetAttachmentUploadSet(result);
        }
        
        private System.IAsyncResult OnBeginGetAttachmentUploadSet(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo = ((MultiFileUpload.UploadServiceAsmx.CredentialInfo)(inValues[0]));
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginGetAttachmentUploadSet(creinfo, callback, asyncState);
        }
        
        private object[] OnEndGetAttachmentUploadSet(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.UploadSetInfo retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndGetAttachmentUploadSet(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAttachmentUploadSetCompleted(object state) {
            if ((this.GetAttachmentUploadSetCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAttachmentUploadSetCompleted(this, new GetAttachmentUploadSetCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAttachmentUploadSetAsync(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo) {
            this.GetAttachmentUploadSetAsync(creinfo, null);
        }
        
        public void GetAttachmentUploadSetAsync(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, object userState) {
            if ((this.onBeginGetAttachmentUploadSetDelegate == null)) {
                this.onBeginGetAttachmentUploadSetDelegate = new BeginOperationDelegate(this.OnBeginGetAttachmentUploadSet);
            }
            if ((this.onEndGetAttachmentUploadSetDelegate == null)) {
                this.onEndGetAttachmentUploadSetDelegate = new EndOperationDelegate(this.OnEndGetAttachmentUploadSet);
            }
            if ((this.onGetAttachmentUploadSetCompletedDelegate == null)) {
                this.onGetAttachmentUploadSetCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAttachmentUploadSetCompleted);
            }
            base.InvokeAsync(this.onBeginGetAttachmentUploadSetDelegate, new object[] {
                        creinfo}, this.onEndGetAttachmentUploadSetDelegate, this.onGetAttachmentUploadSetCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginStoreFileAdvanced(MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStoreFileAdvanced(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginStoreFileAdvanced(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedRequest inValue = new MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedRequest();
            inValue.fileName = fileName;
            inValue.data = data;
            inValue.dataLength = dataLength;
            inValue.parameters = parameters;
            inValue.firstChunk = firstChunk;
            inValue.lastChunk = lastChunk;
            inValue.creinfo = creinfo;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginStoreFileAdvanced(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndStoreFileAdvanced(System.IAsyncResult result) {
            return base.Channel.EndStoreFileAdvanced(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private MultiFileUpload.UploadServiceAsmx.AttachmentInfo EndStoreFileAdvanced(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndStoreFileAdvanced(result);
            return retVal.StoreFileAdvancedResult;
        }
        
        private System.IAsyncResult OnBeginStoreFileAdvanced(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            byte[] data = ((byte[])(inValues[1]));
            int dataLength = ((int)(inValues[2]));
            string parameters = ((string)(inValues[3]));
            bool firstChunk = ((bool)(inValues[4]));
            bool lastChunk = ((bool)(inValues[5]));
            MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo = ((MultiFileUpload.UploadServiceAsmx.CredentialInfo)(inValues[6]));
            return this.BeginStoreFileAdvanced(fileName, data, dataLength, parameters, firstChunk, lastChunk, creinfo, callback, asyncState);
        }
        
        private object[] OnEndStoreFileAdvanced(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.AttachmentInfo retVal = this.EndStoreFileAdvanced(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStoreFileAdvancedCompleted(object state) {
            if ((this.StoreFileAdvancedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StoreFileAdvancedCompleted(this, new StoreFileAdvancedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StoreFileAdvancedAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo) {
            this.StoreFileAdvancedAsync(fileName, data, dataLength, parameters, firstChunk, lastChunk, creinfo, null);
        }
        
        public void StoreFileAdvancedAsync(string fileName, byte[] data, int dataLength, string parameters, bool firstChunk, bool lastChunk, MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, object userState) {
            if ((this.onBeginStoreFileAdvancedDelegate == null)) {
                this.onBeginStoreFileAdvancedDelegate = new BeginOperationDelegate(this.OnBeginStoreFileAdvanced);
            }
            if ((this.onEndStoreFileAdvancedDelegate == null)) {
                this.onEndStoreFileAdvancedDelegate = new EndOperationDelegate(this.OnEndStoreFileAdvanced);
            }
            if ((this.onStoreFileAdvancedCompletedDelegate == null)) {
                this.onStoreFileAdvancedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStoreFileAdvancedCompleted);
            }
            base.InvokeAsync(this.onBeginStoreFileAdvancedDelegate, new object[] {
                        fileName,
                        data,
                        dataLength,
                        parameters,
                        firstChunk,
                        lastChunk,
                        creinfo}, this.onEndStoreFileAdvancedDelegate, this.onStoreFileAdvancedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.BeginCancelUpload(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, string fileName, string forumid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelUpload(creinfo, fileName, forumid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void MultiFileUpload.UploadServiceAsmx.MixObjectsSoap.EndCancelUpload(System.IAsyncResult result) {
            base.Channel.EndCancelUpload(result);
        }
        
        private System.IAsyncResult OnBeginCancelUpload(object[] inValues, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo = ((MultiFileUpload.UploadServiceAsmx.CredentialInfo)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            string forumid = ((string)(inValues[2]));
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).BeginCancelUpload(creinfo, fileName, forumid, callback, asyncState);
        }
        
        private object[] OnEndCancelUpload(System.IAsyncResult result) {
            ((MultiFileUpload.UploadServiceAsmx.MixObjectsSoap)(this)).EndCancelUpload(result);
            return null;
        }
        
        private void OnCancelUploadCompleted(object state) {
            if ((this.CancelUploadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelUploadCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelUploadAsync(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, string fileName, string forumid) {
            this.CancelUploadAsync(creinfo, fileName, forumid, null);
        }
        
        public void CancelUploadAsync(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, string fileName, string forumid, object userState) {
            if ((this.onBeginCancelUploadDelegate == null)) {
                this.onBeginCancelUploadDelegate = new BeginOperationDelegate(this.OnBeginCancelUpload);
            }
            if ((this.onEndCancelUploadDelegate == null)) {
                this.onEndCancelUploadDelegate = new EndOperationDelegate(this.OnEndCancelUpload);
            }
            if ((this.onCancelUploadCompletedDelegate == null)) {
                this.onCancelUploadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelUploadCompleted);
            }
            base.InvokeAsync(this.onBeginCancelUploadDelegate, new object[] {
                        creinfo,
                        fileName,
                        forumid}, this.onEndCancelUploadDelegate, this.onCancelUploadCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MultiFileUpload.UploadServiceAsmx.MixObjectsSoap CreateChannel() {
            return new MixObjectsSoapClientChannel(this);
        }
        
        private class MixObjectsSoapClientChannel : ChannelBase<MultiFileUpload.UploadServiceAsmx.MixObjectsSoap>, MultiFileUpload.UploadServiceAsmx.MixObjectsSoap {
            
            public MixObjectsSoapClientChannel(System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsSoap> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginADMedia(string pagename, int forumid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = pagename;
                _args[1] = forumid;
                System.IAsyncResult _result = base.BeginInvoke("ADMedia", _args, callback, asyncState);
                return _result;
            }
            
            public string EndADMedia(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ADMedia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChartData(int topicid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = topicid;
                System.IAsyncResult _result = base.BeginInvoke("ChartData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndChartData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ChartData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAlbumData(int albumid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = albumid;
                System.IAsyncResult _result = base.BeginInvoke("AlbumData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAlbumData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AlbumData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAttachmentUploadSet(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = creinfo;
                System.IAsyncResult _result = base.BeginInvoke("GetAttachmentUploadSet", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.UploadSetInfo EndGetAttachmentUploadSet(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.UploadSetInfo _result = ((MultiFileUpload.UploadServiceAsmx.UploadSetInfo)(base.EndInvoke("GetAttachmentUploadSet", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStoreFileAdvanced(MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("StoreFileAdvanced", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse EndStoreFileAdvanced(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse _result = ((MultiFileUpload.UploadServiceAsmx.StoreFileAdvancedResponse)(base.EndInvoke("StoreFileAdvanced", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCancelUpload(MultiFileUpload.UploadServiceAsmx.CredentialInfo creinfo, string fileName, string forumid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = creinfo;
                _args[1] = fileName;
                _args[2] = forumid;
                System.IAsyncResult _result = base.BeginInvoke("CancelUpload", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCancelUpload(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CancelUpload", _args, result);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Discuz.Web.Services", ConfigurationName="UploadServiceAsmx.MixObjectsHttpGet")]
    public interface MixObjectsHttpGet {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpGet/ADMediaRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpGet/ADMediaResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.ADMediaResponse EndADMedia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpGet/ChartDataRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpGet/ChartDataResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.ChartDataResponse EndChartData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpGet/AlbumDataRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpGet/AlbumDataResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.AlbumDataResponse EndAlbumData(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ADMediaRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string pagename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string forumid;
        
        public ADMediaRequest() {
        }
        
        public ADMediaRequest(string pagename, string forumid) {
            this.pagename = pagename;
            this.forumid = forumid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ADMediaResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public ADMediaResponse() {
        }
        
        public ADMediaResponse(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChartDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string topicid;
        
        public ChartDataRequest() {
        }
        
        public ChartDataRequest(string topicid) {
            this.topicid = topicid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChartDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public ChartDataResponse() {
        }
        
        public ChartDataResponse(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AlbumDataRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string albumid;
        
        public AlbumDataRequest() {
        }
        
        public AlbumDataRequest(string albumid) {
            this.albumid = albumid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AlbumDataResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public AlbumDataResponse() {
        }
        
        public AlbumDataResponse(string @string) {
            this.@string = @string;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface MixObjectsHttpGetChannel : MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ADMediaCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ADMediaCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ChartDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChartDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AlbumDataCompletedEventArgs1 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AlbumDataCompletedEventArgs1(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class MixObjectsHttpGetClient : System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet>, MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet {
        
        private BeginOperationDelegate onBeginADMediaDelegate;
        
        private EndOperationDelegate onEndADMediaDelegate;
        
        private System.Threading.SendOrPostCallback onADMediaCompletedDelegate;
        
        private BeginOperationDelegate onBeginChartDataDelegate;
        
        private EndOperationDelegate onEndChartDataDelegate;
        
        private System.Threading.SendOrPostCallback onChartDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAlbumDataDelegate;
        
        private EndOperationDelegate onEndAlbumDataDelegate;
        
        private System.Threading.SendOrPostCallback onAlbumDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MixObjectsHttpGetClient() {
        }
        
        public MixObjectsHttpGetClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MixObjectsHttpGetClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsHttpGetClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsHttpGetClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ADMediaCompletedEventArgs1> ADMediaCompleted;
        
        public event System.EventHandler<ChartDataCompletedEventArgs1> ChartDataCompleted;
        
        public event System.EventHandler<AlbumDataCompletedEventArgs1> AlbumDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginADMedia(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginADMedia(string pagename, string forumid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.ADMediaRequest inValue = new MultiFileUpload.UploadServiceAsmx.ADMediaRequest();
            inValue.pagename = pagename;
            inValue.forumid = forumid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).BeginADMedia(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.ADMediaResponse MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.EndADMedia(System.IAsyncResult result) {
            return base.Channel.EndADMedia(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndADMedia(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.ADMediaResponse retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).EndADMedia(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginADMedia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pagename = ((string)(inValues[0]));
            string forumid = ((string)(inValues[1]));
            return this.BeginADMedia(pagename, forumid, callback, asyncState);
        }
        
        private object[] OnEndADMedia(System.IAsyncResult result) {
            string retVal = this.EndADMedia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnADMediaCompleted(object state) {
            if ((this.ADMediaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ADMediaCompleted(this, new ADMediaCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ADMediaAsync(string pagename, string forumid) {
            this.ADMediaAsync(pagename, forumid, null);
        }
        
        public void ADMediaAsync(string pagename, string forumid, object userState) {
            if ((this.onBeginADMediaDelegate == null)) {
                this.onBeginADMediaDelegate = new BeginOperationDelegate(this.OnBeginADMedia);
            }
            if ((this.onEndADMediaDelegate == null)) {
                this.onEndADMediaDelegate = new EndOperationDelegate(this.OnEndADMedia);
            }
            if ((this.onADMediaCompletedDelegate == null)) {
                this.onADMediaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnADMediaCompleted);
            }
            base.InvokeAsync(this.onBeginADMediaDelegate, new object[] {
                        pagename,
                        forumid}, this.onEndADMediaDelegate, this.onADMediaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChartData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginChartData(string topicid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.ChartDataRequest inValue = new MultiFileUpload.UploadServiceAsmx.ChartDataRequest();
            inValue.topicid = topicid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).BeginChartData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.ChartDataResponse MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.EndChartData(System.IAsyncResult result) {
            return base.Channel.EndChartData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndChartData(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.ChartDataResponse retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).EndChartData(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginChartData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string topicid = ((string)(inValues[0]));
            return this.BeginChartData(topicid, callback, asyncState);
        }
        
        private object[] OnEndChartData(System.IAsyncResult result) {
            string retVal = this.EndChartData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChartDataCompleted(object state) {
            if ((this.ChartDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChartDataCompleted(this, new ChartDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChartDataAsync(string topicid) {
            this.ChartDataAsync(topicid, null);
        }
        
        public void ChartDataAsync(string topicid, object userState) {
            if ((this.onBeginChartDataDelegate == null)) {
                this.onBeginChartDataDelegate = new BeginOperationDelegate(this.OnBeginChartData);
            }
            if ((this.onEndChartDataDelegate == null)) {
                this.onEndChartDataDelegate = new EndOperationDelegate(this.OnEndChartData);
            }
            if ((this.onChartDataCompletedDelegate == null)) {
                this.onChartDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChartDataCompleted);
            }
            base.InvokeAsync(this.onBeginChartDataDelegate, new object[] {
                        topicid}, this.onEndChartDataDelegate, this.onChartDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAlbumData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAlbumData(string albumid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.AlbumDataRequest inValue = new MultiFileUpload.UploadServiceAsmx.AlbumDataRequest();
            inValue.albumid = albumid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).BeginAlbumData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.AlbumDataResponse MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet.EndAlbumData(System.IAsyncResult result) {
            return base.Channel.EndAlbumData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndAlbumData(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.AlbumDataResponse retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet)(this)).EndAlbumData(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginAlbumData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string albumid = ((string)(inValues[0]));
            return this.BeginAlbumData(albumid, callback, asyncState);
        }
        
        private object[] OnEndAlbumData(System.IAsyncResult result) {
            string retVal = this.EndAlbumData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAlbumDataCompleted(object state) {
            if ((this.AlbumDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AlbumDataCompleted(this, new AlbumDataCompletedEventArgs1(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AlbumDataAsync(string albumid) {
            this.AlbumDataAsync(albumid, null);
        }
        
        public void AlbumDataAsync(string albumid, object userState) {
            if ((this.onBeginAlbumDataDelegate == null)) {
                this.onBeginAlbumDataDelegate = new BeginOperationDelegate(this.OnBeginAlbumData);
            }
            if ((this.onEndAlbumDataDelegate == null)) {
                this.onEndAlbumDataDelegate = new EndOperationDelegate(this.OnEndAlbumData);
            }
            if ((this.onAlbumDataCompletedDelegate == null)) {
                this.onAlbumDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAlbumDataCompleted);
            }
            base.InvokeAsync(this.onBeginAlbumDataDelegate, new object[] {
                        albumid}, this.onEndAlbumDataDelegate, this.onAlbumDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet CreateChannel() {
            return new MixObjectsHttpGetClientChannel(this);
        }
        
        private class MixObjectsHttpGetClientChannel : ChannelBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet>, MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet {
            
            public MixObjectsHttpGetClientChannel(System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpGet> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ADMedia", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.ADMediaResponse EndADMedia(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.ADMediaResponse _result = ((MultiFileUpload.UploadServiceAsmx.ADMediaResponse)(base.EndInvoke("ADMedia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ChartData", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.ChartDataResponse EndChartData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.ChartDataResponse _result = ((MultiFileUpload.UploadServiceAsmx.ChartDataResponse)(base.EndInvoke("ChartData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AlbumData", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.AlbumDataResponse EndAlbumData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.AlbumDataResponse _result = ((MultiFileUpload.UploadServiceAsmx.AlbumDataResponse)(base.EndInvoke("AlbumData", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Discuz.Web.Services", ConfigurationName="UploadServiceAsmx.MixObjectsHttpPost")]
    public interface MixObjectsHttpPost {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpPost/ADMediaRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpPost/ADMediaResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest1 request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.ADMediaResponse1 EndADMedia(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpPost/ChartDataRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpPost/ChartDataResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest1 request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.ChartDataResponse1 EndChartData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Discuz.Web.Services/MixObjectsHttpPost/AlbumDataRequest", ReplyAction="Discuz.Web.Services/MixObjectsHttpPost/AlbumDataResponse")]
        [System.ServiceModel.XmlSerializerFormatAttribute()]
        System.IAsyncResult BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest1 request, System.AsyncCallback callback, object asyncState);
        
        MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1 EndAlbumData(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ADMediaRequest1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string pagename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=1)]
        public string forumid;
        
        public ADMediaRequest1() {
        }
        
        public ADMediaRequest1(string pagename, string forumid) {
            this.pagename = pagename;
            this.forumid = forumid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ADMediaResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public ADMediaResponse1() {
        }
        
        public ADMediaResponse1(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChartDataRequest1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string topicid;
        
        public ChartDataRequest1() {
        }
        
        public ChartDataRequest1(string topicid) {
            this.topicid = topicid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class ChartDataResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public ChartDataResponse1() {
        }
        
        public ChartDataResponse1(string @string) {
            this.@string = @string;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AlbumDataRequest1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="", Order=0)]
        public string albumid;
        
        public AlbumDataRequest1() {
        }
        
        public AlbumDataRequest1(string albumid) {
            this.albumid = albumid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class AlbumDataResponse1 {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="Discuz.Web.Services", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string @string;
        
        public AlbumDataResponse1() {
        }
        
        public AlbumDataResponse1(string @string) {
            this.@string = @string;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface MixObjectsHttpPostChannel : MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ADMediaCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ADMediaCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ChartDataCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChartDataCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class AlbumDataCompletedEventArgs2 : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AlbumDataCompletedEventArgs2(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class MixObjectsHttpPostClient : System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost>, MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost {
        
        private BeginOperationDelegate onBeginADMediaDelegate;
        
        private EndOperationDelegate onEndADMediaDelegate;
        
        private System.Threading.SendOrPostCallback onADMediaCompletedDelegate;
        
        private BeginOperationDelegate onBeginChartDataDelegate;
        
        private EndOperationDelegate onEndChartDataDelegate;
        
        private System.Threading.SendOrPostCallback onChartDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginAlbumDataDelegate;
        
        private EndOperationDelegate onEndAlbumDataDelegate;
        
        private System.Threading.SendOrPostCallback onAlbumDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MixObjectsHttpPostClient() {
        }
        
        public MixObjectsHttpPostClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MixObjectsHttpPostClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsHttpPostClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MixObjectsHttpPostClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<ADMediaCompletedEventArgs2> ADMediaCompleted;
        
        public event System.EventHandler<ChartDataCompletedEventArgs2> ChartDataCompleted;
        
        public event System.EventHandler<AlbumDataCompletedEventArgs2> AlbumDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest1 request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginADMedia(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginADMedia(string pagename, string forumid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.ADMediaRequest1 inValue = new MultiFileUpload.UploadServiceAsmx.ADMediaRequest1();
            inValue.pagename = pagename;
            inValue.forumid = forumid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).BeginADMedia(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.ADMediaResponse1 MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.EndADMedia(System.IAsyncResult result) {
            return base.Channel.EndADMedia(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndADMedia(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.ADMediaResponse1 retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).EndADMedia(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginADMedia(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string pagename = ((string)(inValues[0]));
            string forumid = ((string)(inValues[1]));
            return this.BeginADMedia(pagename, forumid, callback, asyncState);
        }
        
        private object[] OnEndADMedia(System.IAsyncResult result) {
            string retVal = this.EndADMedia(result);
            return new object[] {
                    retVal};
        }
        
        private void OnADMediaCompleted(object state) {
            if ((this.ADMediaCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ADMediaCompleted(this, new ADMediaCompletedEventArgs2(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ADMediaAsync(string pagename, string forumid) {
            this.ADMediaAsync(pagename, forumid, null);
        }
        
        public void ADMediaAsync(string pagename, string forumid, object userState) {
            if ((this.onBeginADMediaDelegate == null)) {
                this.onBeginADMediaDelegate = new BeginOperationDelegate(this.OnBeginADMedia);
            }
            if ((this.onEndADMediaDelegate == null)) {
                this.onEndADMediaDelegate = new EndOperationDelegate(this.OnEndADMedia);
            }
            if ((this.onADMediaCompletedDelegate == null)) {
                this.onADMediaCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnADMediaCompleted);
            }
            base.InvokeAsync(this.onBeginADMediaDelegate, new object[] {
                        pagename,
                        forumid}, this.onEndADMediaDelegate, this.onADMediaCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest1 request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChartData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginChartData(string topicid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.ChartDataRequest1 inValue = new MultiFileUpload.UploadServiceAsmx.ChartDataRequest1();
            inValue.topicid = topicid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).BeginChartData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.ChartDataResponse1 MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.EndChartData(System.IAsyncResult result) {
            return base.Channel.EndChartData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndChartData(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.ChartDataResponse1 retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).EndChartData(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginChartData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string topicid = ((string)(inValues[0]));
            return this.BeginChartData(topicid, callback, asyncState);
        }
        
        private object[] OnEndChartData(System.IAsyncResult result) {
            string retVal = this.EndChartData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChartDataCompleted(object state) {
            if ((this.ChartDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChartDataCompleted(this, new ChartDataCompletedEventArgs2(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChartDataAsync(string topicid) {
            this.ChartDataAsync(topicid, null);
        }
        
        public void ChartDataAsync(string topicid, object userState) {
            if ((this.onBeginChartDataDelegate == null)) {
                this.onBeginChartDataDelegate = new BeginOperationDelegate(this.OnBeginChartData);
            }
            if ((this.onEndChartDataDelegate == null)) {
                this.onEndChartDataDelegate = new EndOperationDelegate(this.OnEndChartData);
            }
            if ((this.onChartDataCompletedDelegate == null)) {
                this.onChartDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChartDataCompleted);
            }
            base.InvokeAsync(this.onBeginChartDataDelegate, new object[] {
                        topicid}, this.onEndChartDataDelegate, this.onChartDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest1 request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAlbumData(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private System.IAsyncResult BeginAlbumData(string albumid, System.AsyncCallback callback, object asyncState) {
            MultiFileUpload.UploadServiceAsmx.AlbumDataRequest1 inValue = new MultiFileUpload.UploadServiceAsmx.AlbumDataRequest1();
            inValue.albumid = albumid;
            return ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).BeginAlbumData(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1 MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost.EndAlbumData(System.IAsyncResult result) {
            return base.Channel.EndAlbumData(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        private string EndAlbumData(System.IAsyncResult result) {
            MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1 retVal = ((MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost)(this)).EndAlbumData(result);
            return retVal.@string;
        }
        
        private System.IAsyncResult OnBeginAlbumData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string albumid = ((string)(inValues[0]));
            return this.BeginAlbumData(albumid, callback, asyncState);
        }
        
        private object[] OnEndAlbumData(System.IAsyncResult result) {
            string retVal = this.EndAlbumData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAlbumDataCompleted(object state) {
            if ((this.AlbumDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AlbumDataCompleted(this, new AlbumDataCompletedEventArgs2(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AlbumDataAsync(string albumid) {
            this.AlbumDataAsync(albumid, null);
        }
        
        public void AlbumDataAsync(string albumid, object userState) {
            if ((this.onBeginAlbumDataDelegate == null)) {
                this.onBeginAlbumDataDelegate = new BeginOperationDelegate(this.OnBeginAlbumData);
            }
            if ((this.onEndAlbumDataDelegate == null)) {
                this.onEndAlbumDataDelegate = new EndOperationDelegate(this.OnEndAlbumData);
            }
            if ((this.onAlbumDataCompletedDelegate == null)) {
                this.onAlbumDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAlbumDataCompleted);
            }
            base.InvokeAsync(this.onBeginAlbumDataDelegate, new object[] {
                        albumid}, this.onEndAlbumDataDelegate, this.onAlbumDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost CreateChannel() {
            return new MixObjectsHttpPostClientChannel(this);
        }
        
        private class MixObjectsHttpPostClientChannel : ChannelBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost>, MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost {
            
            public MixObjectsHttpPostClientChannel(System.ServiceModel.ClientBase<MultiFileUpload.UploadServiceAsmx.MixObjectsHttpPost> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginADMedia(MultiFileUpload.UploadServiceAsmx.ADMediaRequest1 request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ADMedia", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.ADMediaResponse1 EndADMedia(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.ADMediaResponse1 _result = ((MultiFileUpload.UploadServiceAsmx.ADMediaResponse1)(base.EndInvoke("ADMedia", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChartData(MultiFileUpload.UploadServiceAsmx.ChartDataRequest1 request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("ChartData", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.ChartDataResponse1 EndChartData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.ChartDataResponse1 _result = ((MultiFileUpload.UploadServiceAsmx.ChartDataResponse1)(base.EndInvoke("ChartData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAlbumData(MultiFileUpload.UploadServiceAsmx.AlbumDataRequest1 request, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = request;
                System.IAsyncResult _result = base.BeginInvoke("AlbumData", _args, callback, asyncState);
                return _result;
            }
            
            public MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1 EndAlbumData(System.IAsyncResult result) {
                object[] _args = new object[0];
                MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1 _result = ((MultiFileUpload.UploadServiceAsmx.AlbumDataResponse1)(base.EndInvoke("AlbumData", _args, result)));
                return _result;
            }
        }
    }
}
